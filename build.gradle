plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'info.solidsoft.pitest' version '1.7.0'
	id 'org.sonarqube' version '5.1.0.4882'
}

group = 'br.com.fiap.tech-challenge'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.2'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.2.5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.mockito:mockito-core:5.12.0'
	testImplementation 'com.h2database:h2'

}

jacoco {
	toolVersion = "0.8.12"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test
	reports {
		html.outputLocation = layout.buildDirectory.dir('jacocoReport')
	}

	classDirectories.setFrom(excludeClasses(classDirectories))
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport

	violationRules {
		rule {
			enabled = true
			limit {
				minimum = 0.9
			}
		}
	}

	classDirectories.setFrom(excludeClasses(classDirectories))
}

def excludeClasses(def classDirectories) {
	return files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/dtos/**',
				'**/*DTO.class',
				'**/entities/**',
				'**/interfaces/**',
				'**/*Mapper.class',
				'**/*Handler.class',
				'**/*Application.class'
		])
	})
}

sonarqube {
	properties {
		property "sonar.projectKey", "lanchonete_produto"  // Seu nome de organização no SonarCloud (se aplicável)
		property "sonar.host.url", "http://localhost:9000"
	}
}